<?php
  /**
  * Modulo para la gestión de los entes planificadores
  * Sistema Automatizado para la Planificación Estratégico-Situacional en la Administración Pública Venezolana
  * @file ente_planificador.module
  * Drupal part Module to code ente planificador module
  * Copyright 2011 Sistema Automatizado para la Planificación Estratégico-Situacional en la Administración Pública Venezolana (CENDITEL)
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
  * 
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  * 
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  *
  * @author Cenditel Mérida TSU- Miguel Angel Narvaez Montilva
  * @see http://www.cenditel.gob.ve/
  * @see http://planificacion.cenditel.gob.ve/
  */

/*
 * Implementation of hook_help
 */
// ayuda del modulo 
function ente_planificador_help($path, $arg) {
  switch ($path) {
  // Ayuda general para el módulo Importar Terminos
    case 'admin/help#ente_planificador':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' .'The Ente PLanificador module allows registered users to register their entities'. '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<h3>' . t('help of the module Ente planificador ') . '</h3>'.'<br>';
      $output .= '<h4>' . t('Objetive of module:') . '</h4>';
      $output .= '<h4>' . t('Technical support') . '</h4>';
      $output .='<p>' . t('Contact us on the web for technical support or any questions <a href="@cenditel">cenditel</a>.', array('@cenditel' => url('http://planificacion.cenditel.gob.ve/contactos/'))) . '</p>';
    return $output;
  }  
}

/*
 * implementation of hook_menu()
 */
function ente_planificador_menu(){
  $items['administrar/entes_planificadores'] = array(    // <-- enlace url al modulo 
    'title' => 'Consultar lista de actores planificadores', // <-- titulo de hipervinculo en panel 
    'page callback' => 'ente_planificador_list', // <-- función con la que trabaja 
    'access arguments' => array('admin planificador'), // <-- acceso restringido por hook  permission
    'type' => MENU_NORMAL_ITEM,
  );
  
  //enlace para verificar que sea un nodo real suplementando funcion ente_planificador_leer_ente_planificadores
  // %ente_planificador lee funcion ente_planificador_load($nid)
  $items['admin/people/create/%ente_planificador'] = array(
    'title' => 'Add user',
    //'page callback' => 'user_admin',
    //'page arguments' => array('create'),
    'access arguments' => array('administer users'),// verificar que el nodoe s de ente planificador.
    'type' => MENU_LOCAL_ACTION,
    //'file' => 'user.admin.inc',
  );
  /*
  $items['entes_planificadores/registrar'] = array(
    'title' => 'Registrar Actores Planificadores',
    'page callback' => 'entes_planificadores_agregar',
    'access arguments' => array('admin planificador'),
    'type' => MENU_NORMAL_ITEM,
  );
  */
  $items['admin/settings/ente_planificador'] = array(
    'title' => t('Configuración Ente Planificador'),
    'description' => t('Configuración del Ente Planificador.'),
    'access callback'=> TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/ente_planificador/view'] = array(
    'title' => t('Ente Planificador'),
    'description' => t('Configuración de views del Ente Planificador.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ente_planificador_admin_settings_form'),
    'access callback'=> TRUE,
    'type' => MENU_NORMAL_ITEM,
    //file
  );

  $items['administrar/entes_planificadores/registrar'] = array(
    'title' => 'Registrar Actores Planificadores',
    'page callback' => 'entes_planificadores_agregar',
    'page arguments' => array(1),
    'access arguments' => array('admin planificador'),
    'type' => MENU_NORMAL_ITEM,
  );

  /*Item required to include tab in configuration ente planificador
  $items['admin/settings/ente_planificador/view/settings'] = array(
    //'title' =>  t('Configurar'),
    'access callback'=> TRUE,
    'type' => MENU_LOCAL_TASK,
  );*/

  $items['admin/settings/ente_planificador/view/default'] = array(
    'title' => t('Configuración de views'),
    'description' => t('Configuración de views del Ente Planificador.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ente_planificador_admin_settings_form'),
    'access callback'=> TRUE,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    //file

  );
  return $items;
}

/*
 * entes_planificadores_ente_planificador_views_list
 * Lista de actores planificadores
 */
function ente_planificador_list() {

//call the name and display of view can see in this function this is controller for ente_planificador_admin_settings_form

  if(variable_get('ente_planificador_views_list', NULL) && variable_get('ente_planificador_display_views', NULL)) {
    $view_name = variable_get('ente_planificador_views_list', 'list_actores_planificador');
    $view_page = variable_get('ente_planificador_display_views', 'Master');
    $view = views_get_view($view_name);
    $view->set_display($view_page);
    $view->pre_execute();
    $view->execute();
    $output = $view->render();
  }
  else{ 

//https://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/t/7.x
//https://www.drupal.org/docs/7/security/writing-secure-code/handle-text-in-a-secure-fashion
//https://drupalize.me/system/files/video/companion_files/security-d7-cheatsheet.pdf

    $msg = t("El modulo no esta configurado para configurarlo haga clic !url.", array('!url' => l(t('aquí'), "admin/settings/ente_planificador/view")));
    $output = drupal_set_message($msg, $type = 'warning');
  }
  return $output;
} 

/**
 * entes_planificadores_agregar
 * Agregar un ente planificador
 */
function entes_planificadores_agregar() {
  drupal_goto('node/add/ente-planificador');
}

/*
 * Implementation of hook_form()
 */
function ente_planificador_admin_settings_form($form, &$form_state) {
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('List of views to manage in the system'),
  );

  $options = array();
  $views = views_get_all_views();
  foreach ($views as $view){
    $options[$view->name] = $view->human_name;
  }
  // form of select the list of views 
  //$form̈́['ente_planificador_views_list'] = array(
  $form['ente_planificador_views_list'] = array(
    '#type'             => 'select',
    '#default_value'    => variable_get('ente_planificador_views_list', 'list_actores_planificador'),
    '#required'         =>TRUE,
    '#title'            => t('selected the views.'),
    '#options'          => $options,
    '#description'      => t('List of available views '),
    '#ajax' => array(
      'callback' => 'ente_planificador_views_ajax_display', 
      'wrapper' => 'views-container-display', 
      'effect' => 'fade',
      'event' => 'change',
      'method' => 'replace',
    ),
  );

  $form['views_container'] = array(
    '#type' => 'container', 
    '#prefix' => '<div id="views-container-display">',
    '#suffix' => '</div>',
  );

  if (isset($form_state['values']['ente_planificador_views_list']) || (variable_get('ente_planificador_views_list', NULL))){

    $name = (isset($form_state['values']['ente_planificador_views_list'])) ? $form_state['values']['ente_planificador_views_list'] : variable_get('ente_planificador_views_list', 'list_actores_planificador');
    //$name = $form_state['values']['views'];
    $view =  views_get_view($name, 0);
    foreach ($view->display as $key => $display){
      $options_display[$key] = $display->display_title;
    }

    //$form['views_container']['ente_planificador_display_views'] = array(
    $form['views_container']['ente_planificador_display_views'] = array(
      '#type'  =>  'select',
      '#required'  =>  TRUE,
      '#title'  =>  t('selected the type of view.'),
      '#default_value'  =>  variable_get('ente_planificador_display_views', 'Master'),//call the value of form for system_settings_form 
      '#options'  =>  $options_display,
      '#description'  =>  t('List of available types of views'),
    );
  }
  $form = system_settings_form($form);//autosave information of the form.
  return $form;
}

/*
 * Implementation of function ente_planificador_views_ajax_display   
 */ 
function ente_planificador_views_ajax_display($form, &$form_state) {
  return $form['views_container'];
}

/*
 * Implementation of hook permission()
 */
// permisos administrativos para acceder al modulo 
function ente_planificador_permission() {
  return array(
    'admin planificador' => array(
      'title' => t('admin planificador'),
      'description' => t('Possibility of accessing to work with the module ente planificador and the functionalities incorporated in it.'),
    ),
    'ver planificador' => array(
      'title' => t('ver planificador'),
      'description' => t('Possibility of accessing to work with the module ente planificador and the functionalities incorporated in it.'),
    ),
    'edit own planificador' => array(
      'title' => t('edit own planificador'),
      'description' => t('Possibility of accessing to work with the module ente planificador and the functionalities incorporated in it.'),
    ),
    'edit all planificador' => array(
      'title' => t('edit all planificador'),
      'description' => t('Possibility of accessing to work with the module ente planificador and the functionalities incorporated in it.'),
    ),
    'admin all planificador' => array(
      'title' => t('admin all planificador'),
      'description' => t('Possibility of accessing to work with the module ente planificador and the functionalities incorporated in it.'),
    ),
  );
}

/**
 * Implementation of hook_views_api().
 */
function ente_planificador_views_api($module = NULL, $api = NULL) {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'ente_planificador') . '/views',
  );
}


//se crea el tipo de contenido ente planificador con el hook_node_info & hook_form
/*
 * Implementation of hook_node_info()
 */
function ente_planificador_node_info() {
  return array(
    'ente_planificador' => array(
      'name' => t('Ente Planificador'),
      'base' => 'node_content',
      'description' => t('Ente planificador for Drupal 7.'),
    ),
  );
}

/*ente_planificador
 * Implementation of hook_node_presave()
 */
function ente_planificador_node_presave($node) {
  //isset($node->language) : LANGUAGE_NONE;
  jkosdnfsdn();

  if ($node->type =='ente_planificador') {
    $node->title = $node->field_razon_social['und'][0]['value']; 
    // the same information is saved from the field_razon_social in field  title
  }
}

/*
 * Implementation of hook_node_access
 * Control access to a node.
 */
function ente_planificador_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'ente_planificador' ) {
    if ($op == 'view') {
      return (user_access('ver planificador')) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
    }
    if ($op == 'create') {
      return ((user_access('edit all planificador'))||(user_access('admin planificador'))) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
    }
    if ($op == 'update') {
      return (user_access('edit all planificador') || user_access('admin planificador') || (user_access('edit own planificador') && ($account->uid == $node->usuarios[$account->uid]))) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
    }
    if ($op == 'delete') {
      return ((user_access('edit all planificador'))||(user_access('admin planificador'))) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
    }
  }
  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}


/**
 * Implementation of ente_planificador_load suplandado por ente_planificador_leer_ente_planificadores().
 * funcion para evitar la leida muchas veces de un ente planificador
 */
function ente_planificador_load($ente_planificador = 0) {
  $ente_planificadores = &drupal_static(__FUNCTION__); // guardado valor de nid en $ente_planificador_load
 
  if (is_numeric($ente_planificador) && !isset($ente_planificadores[$ente_planificador])) {
    if ($ente_planificador_leido = node_load($ente_planificador)) {
      if ($ente_planificador_leido->type == 'ente_planificador') { 
       $ente_planificadores[$ente_planificador_leido->nid] = $ente_planificador_leido; 
      }
    }
  }
  return isset($ente_planificadores[$ente_planificador]) ? $ente_planificadores[$ente_planificador] : FALSE;
}


/*
 * Implementation of ente_planificador_usuario_ve_ente()
 */
function ente_planificador_usuario_ve_ente() {
  global $user;
  if (user_access('edit own planificador')) {
    $entes = usuario_tiene_ente($user->uid);
    if (is_array($entes) && array_values($entes)) {
      return true;
    }
  }
  return FALSE;
}

/*
 * usuario_tiene_ente
 * retorna los entes que tiene un usuario
 */
function usuario_tiene_ente($uid) {
  $entes = array();
  $user = user_load($uid);
  $lang = (!empty($user->language)) ? $user->language : LANGUAGE_NONE;
  if ($field_enteplanificador = $user->field_enteplanificador_user) {
    $nids = array();
    foreach ($field_enteplanificador[$lang] as $values) {
      $nids[$values['target_id']] = $values['target_id'];
    }

    if (count($nids)) {
      $entes = node_load_multiple($nids);
    }
  }
  return $entes;
}

/*
 * Implementation of hook_block_info()
 * informar a Drupal de la existencia de nuestro bloque
 */
function ente_planificador_block_info(){
    $blocks['ente_planificador_user_current'] = array(
    'info' => t('user current'), 
    'cache' => DRUPAL_NO_CACHE,
    //'status' => TRUE,
    //'region' => 'header',
    //'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    //'pages' => '/'
  );
  return $blocks;
}

/*
 * Implementation of hook_block_view()
 * definir el contenido del bloque que se hará uso
 */
function ente_planificador_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ente_planificador_user_current':
      $block['subject'] = t('user current'); 
      // Función que retorna el contenido o función que se quiere en el bloque.
      $block['content'] = ente_planificador_block_of_user_login(); 
      break;
    }
    return $block;
}

/*
 * Implementation of ente_planificador_block_of_user_login()
 */
function ente_planificador_block_of_user_login() {
  $view = views_get_view('ente_planificador_block_user_current');
  $view->set_display('block');
  $view->pre_execute();
  $view->execute();
  $output = $view->render();
  return $output;
}

/**
 * Implementation of hook_form_alter().
 */
function ente_planificador_form_alter(&$form, &$form_state, $form_id){
  //user_profile_form
  if (arg(3) && is_numeric(arg(3))) {
    if ($form_id == 'user_register_form' && ente_planificador_load(arg(3))) {
      $ente_planificador = arg(3); //The number of the planner entity of argument 3 given by the url is stored in the variable.
      $lang = $form['field_enteplanificador_user']['#language']; // lenguaje que se esta trabajando.
      $form['field_enteplanificador_user'][$lang]['#default_value'] = $ente_planificador; // it gives the value to the select.
      $form['field_enteplanificador_user']['#access'] = FALSE;

      /*
        if (ente_planificador_usuario_ve_ente()) {
          print_r(ente_planificador_usuario_ve_ente());
        }
      */
    }
    else {
      $form['field_enteplanificador_user']['#access'] = FALSE;
    }
  }
}
